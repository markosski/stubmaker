#macro( params, $params )
#set($sep = "")
#foreach( $p in $params )$sep$p#set($sep = ", ")#end
#end
#macro( names, $params )
#set($sep = "")
#foreach( $p in $params )$sep${p.ParamName}#set($sep = ", ")#end
#end
#macro( typeName, $param )
#if($param == "void")Void#end
#end
// Generated with stubmaker.
package $packageName;

import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;
import java.util.function.Supplier;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class $className implements $interfaceName {
    private final Logger logger = LoggerFactory.getLogger(${className}.class);
#foreach( $m in $methods )
#if($m.Params.size() > 0)
    record ${m.MethodName}Params(#params($m.Params)) {}
#end
#end

#foreach( $m in $methods )
#if($m.Params.size() > 0 && $m.ReturnType != "void")
    private Function<${m.MethodName}Params,$m.ReturnType> ${m.MethodName}_default = (params) -> null;
    private final Map<${m.MethodName}Params, $m.ReturnType> whenThenMap_$m.methodName = new HashMap<>();
#elseif($m.ReturnType != "void")
    private Supplier<$m.ReturnType> ${m.MethodName}_default = () -> null;
#end
#end
#foreach( $m in $methods )
#if($m.Params.size() > 0)
    public $m.ReturnType ${m.MethodName}(#params($m.Params)) {
        var params = new ${m.MethodName}Params(#names($m.Params));
        logger.info("Calling method `$m.MethodName` with parameters: " + params);
    #if($m.ReturnType != "void")
        return whenThenMap_${m.MethodName}.getOrDefault(params, ${m.MethodName}_default.apply(params));
    #end
    }
#else
    public $m.ReturnType ${m.MethodName}() {
        logger.info("Calling method `$m.MethodName`");
    #if($m.ReturnType != "void")
        return ${m.MethodName}_default.get();
    #end
    }
#end
#if($m.Params.size() > 0 && $m.ReturnType != "void")
    public void when_${m.MethodName}(#params($m.Params), ${m.ReturnType} thenReturn) {
        var params = new ${m.MethodName}Params(#names($m.Params));
        whenThenMap_${m.MethodName}.put(params, thenReturn);
    }
    public void when_${m.MethodName}(Function<${m.MethodName}Params, ${m.ReturnType}> thenApply) {
        this.${m.MethodName}_default = thenApply;
    }
#elseif($m.ReturnType != "void")
    public void when_${m.MethodName}(Supplier<$m.ReturnType> thenCall) {
        this.${m.MethodName}_default = thenCall;
    }
#end
#end
}
